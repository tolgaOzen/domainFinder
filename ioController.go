package main

import (
	"io/ioutil"
	"fmt"
	"os"
	"time"
	"strings"
)

type IoController struct {
	InPut       string
	OutPut      string
	filePath    string
	openFile    *os.File
	openFileErr error
	folderName  string
	fileName    string
}

const (
	sleep = time.Second * 5
)

//ugur

func (io *IoController) log(val string, figure Figure) {
	if figure == OK {
		tn := time.Now()

		a := tn.Format("15:04:05")
		io.openFile.WriteString("\n" + a + "\t" + val)

	} else {
		io.openFile.WriteString(val)
	}
}

////////////////////////////// FOR IN DISI /////////////////////////////////
func (io *IoController) setFolderPath(folderName string) {
	io.folderName = folderName
}
func (io *IoController) setFileName(fileName string) {
	io.fileName = fileName
}
func (io *IoController) openLogFile(autoGenerateToDate bool) {
	//yoksa olusturacak var acacak
	var filePath string

	if io.folderName == "" {
		filePath = outputFolderPath
	} else {
		filePath = io.folderName
	}

	io.createDirectory(filePath)

	var fileName string
	if autoGenerateToDate {
		tn := time.Now()
		fileName = tn.Format("02-01-2006.txt")
	} else {
		if io.fileName == "" {
			fileName = "notAutoGeneratedFileName.txt"
		} else {
			fileName = io.fileName
		}
	}

	//gopre.Pre(fileName)

	var newPath string = filePath + fileName
	//gopre.Pre(newPath)
	io.openFile, io.openFileErr = os.OpenFile(newPath, os.O_RDWR|os.O_CREATE|os.O_APPEND, 0666)
	//gopre.Pre(newPath)
	//if isCreated {
	//
	//} else {
	//	//as;dlkasdl;kas;dlkasd
	//}

}
func (io *IoController) createDirectory(directoryName string) bool {
	if _, err := os.Stat(directoryName); os.IsNotExist(err) {

		if os.Mkdir(directoryName, os.ModePerm) == nil {
			return true
		}
		return false
	}
	return false
}
func (io *IoController) setFilePath(filePath string) {
	var newPath string = filePath
	io.openFile, io.openFileErr = os.OpenFile(newPath, os.O_APPEND|os.O_WRONLY, 0644)

}

func (io IoController) appendByte(val []byte) {
	io.openFile.Write(val)
}
func (io IoController) appendFile(val string) {
	io.openFile.WriteString(val)
	//if io.openFile == nil {
	//	fmt.Print("setFilePathle io.openFile i doldurmalisin")
	//}

}

func (io IoController) GetFolderList(val string) ([]string, error) {
	var returnValue = []string{}

	files, err := ioutil.ReadDir(val)
	// ./ nerdeysen onu arar
	//if err != nil {
	//	//fmt.Println("Dosya Bulunamadi")
	//	//fmt.Println("soyledigin ", files)
	//}

	for _, f := range files {

		returnValue = append(returnValue, f.Name())

	}

	return returnValue, err
}

// buraci dic create eder privatetir

func (io IoController) createDic(val int) {

	if val == 1 {
		os.MkdirAll(io.InPut, os.ModePerm)
		//gopre.Pre(io.InPut)
	} else {
		os.MkdirAll(io.OutPut, os.ModePerm)
	}
}

func (io IoController) CreateTestFile(val string, folderName string, fileName string, testerDomain string) {
	//	var returnVal bool

	if val == "yes" || val == "" {

		var file, err = os.Create(standartPath + "/" + folderName + "/" + fileName)
		if err != nil {
			fmt.Println("Path hatali yeniden deneyin")
			//gopre.Pre(standartPath)
			os.Exit(1)
		}
		defer file.Close()

		io.setFilePath(standartPath + "/" + folderName + "/" + fileName)
		io.appendFile(testerDomain)

		//returnVal = true

	} else {
		fmt.Println("lutfen " + folderName + " folderiniza domainlerin yazili oldugu bir dosya yerlestiriniz")

		time.Sleep(sleep)

		PathOkLogContol()

		fmt.Println("tesekkurler... tarama basliyor")
		//returnVal = false
	}
	//return returnVal
}

func (io IoController) GetFolderListOrCreateFolder(val int) []string {
	var returnVal = []string{}
	var err error
	var path string
	var pathInt int

	if val == 1 {

		path = io.InPut
		pathInt = 1

	} else {
		path = io.OutPut
		pathInt = 2

	}

	returnVal, err = io.GetFolderList(path)

	if err != nil {

		io.createDic(pathInt)
	}
	return returnVal

}

func PathOkLogContol() []string {

	var returnval = []string{}

	ioa := IoController{}

	folderPathFiller()

	FolderControl, _ := ioa.GetFolderList(inputFolderPath)

	Foldercheck := 0

	for _, inputcheck := range FolderControl {

		if strings.HasPrefix(inputcheck, ".") {

		} else {

			Foldercheck++
		}

	}

	//gopre.Pre(len(inputFolderControl) == 0)
	if Foldercheck == 0 {
		//burada input folder icerisine test dosyasi sorulacak
		var answer string
		fmt.Println("Input Folderinizda herhangi bir dosya yok ornek bir dosya olusturmamizi ister misiniz? ")
		fmt.Scanln(&answer)
		ioa.CreateTestFile(answer, inputName, "tester.txt", "deneme.com\n"+"deneme1.com\n"+"deneme2.com\n")

	}

	inputFolderControl2, _ := ioa.GetFolderList(inputFolderPath)

	Foldercheck2 := 0

	for _, inputcheck2 := range inputFolderControl2 {

		if strings.HasPrefix(inputcheck2, ".") {

		} else {

			// en son haline bakilsin diye actim
			//gopre.Pre(inputFolderPath)
			// pathler var demek
			//adam kullanmissa buradan devam ediyor
			returnval = append(returnval, inputcheck2)
			Foldercheck2++
		}

	}

	//virusScanProgram := filesScanner{inputFolderControl2[1:]}
	//virusScanProgram.HaydiScan()
	// txt sayisi lazim olursa kullan

	return returnval
}
